// Package iam provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package iam

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	JwtBearerAuthScopes = "jwtBearerAuth.Scopes"
)

// Defines values for TokenIntrospectionResponseAssuranceLevel.
const (
	High        TokenIntrospectionResponseAssuranceLevel = "high"
	Low         TokenIntrospectionResponseAssuranceLevel = "low"
	Substantial TokenIntrospectionResponseAssuranceLevel = "substantial"
)

// RedirectResponseWithID defines model for RedirectResponseWithID.
type RedirectResponseWithID struct {
	// RedirectUri The URL to which the user-agent will be redirected after the authorization request.
	RedirectUri string `json:"redirect_uri"`

	// SessionId The session ID that can be used to retrieve the access token by the calling application.
	SessionId string `json:"session_id"`
}

// SearchVCResult result of a Search operation.
type SearchVCResult struct {
	// Revocation Credential revocation record
	Revocation *Revocation `json:"revocation,omitempty"`

	// VerifiableCredential A credential according to the W3C and Nuts specs.
	VerifiableCredential VerifiableCredential `json:"verifiableCredential"`
}

// SearchVCResults result of a Search operation.
type SearchVCResults struct {
	VerifiableCredentials []SearchVCResult `json:"verifiableCredentials"`
}

// TokenIntrospectionRequest Token introspection request as described in RFC7662 section 2.1
type TokenIntrospectionRequest struct {
	Token string `json:"token"`
}

// TokenIntrospectionResponse Token introspection response as described in RFC7662 section 2.2
type TokenIntrospectionResponse struct {
	// Active True if the token is active, false if the token is expired, malformed etc. Required per RFC7662
	Active bool `json:"active"`

	// AssuranceLevel Assurance level of the identity of the End-User.
	AssuranceLevel *TokenIntrospectionResponseAssuranceLevel `json:"assurance_level,omitempty"`

	// Aud RFC7662 - Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT [RFC7519].
	Aud *string `json:"aud,omitempty"`

	// ClientId The client (DID) the access token was issued to
	ClientId *string `json:"client_id,omitempty"`

	// Email End-User's preferred e-mail address. Should be a personal email and can be used to uniquely identify a user. Just like the email used for an account.
	Email *string `json:"email,omitempty"`

	// Exp Expiration date in seconds since UNIX epoch
	Exp *int `json:"exp,omitempty"`

	// FamilyName Surname(s) or last name(s) of the End-User.
	FamilyName *string `json:"family_name,omitempty"`

	// Iat Issuance time in seconds since UNIX epoch
	Iat *int `json:"iat,omitempty"`

	// Initials Initials of the End-User.
	Initials *string `json:"initials,omitempty"`

	// InputDescriptorConstraintIdMap Mapping from the ID field of a 'presentation_definition' input descriptor constraints to the value provided in the 'vps' for the constraints.
	// The Policy Decision Point can use this map to make decisions without having to deal with PEX/VCs/VPs/SignatureValidation
	InputDescriptorConstraintIdMap *map[string]interface{} `json:"input_descriptor_constraint_id_map,omitempty"`

	// Iss Contains the DID of the authorizer. Should be equal to 'sub'
	Iss *string `json:"iss,omitempty"`

	// Prefix Surname prefix
	Prefix *string `json:"prefix,omitempty"`

	// PresentationDefinition presentation definition, as described in presentation exchange specification, fulfilled to obtain the access token
	PresentationDefinition *map[string]interface{} `json:"presentation_definition,omitempty"`

	// PresentationSubmission mapping of 'vps' contents to the 'presentation_definition'
	PresentationSubmission *map[string]interface{} `json:"presentation_submission,omitempty"`

	// Scope granted scopes
	Scope *string `json:"scope,omitempty"`

	// Sub Contains the DID of the resource owner
	Sub *string `json:"sub,omitempty"`

	// UserRole Role of the End-User.
	UserRole *string `json:"user_role,omitempty"`

	// Username Identifier uniquely identifying the End-User's account in the issuing system.
	Username *string `json:"username,omitempty"`

	// Vps The Verifiable Presentations that were used to request the access token using the same encoding as used in the access token request.
	Vps *[]VerifiablePresentation `json:"vps,omitempty"`
}

// TokenIntrospectionResponseAssuranceLevel Assurance level of the identity of the End-User.
type TokenIntrospectionResponseAssuranceLevel string

// DcrOid4vpAuthorizeParams defines parameters for DcrOid4vpAuthorize.
type DcrOid4vpAuthorizeParams struct {
	// Request Should be a signed request object as JWT with the following required fields:
	//   - response_type : vp_token
	//   - client_id : did value
	//   - client_id_scheme : "did"
	//   - redirect_uri: the uri to redirect to
	//   - state: state
	//   - nonce: unique
	//   - presentation_definition or presentation_definition_uri
	//   - user_hint
	Request string `form:"request" json:"request"`
}

// CallbackOid4vciIssuanceParams defines parameters for CallbackOid4vciIssuance.
type CallbackOid4vciIssuanceParams struct {
	// Code The oauth2 code response.
	Code string `form:"code" json:"code"`
}

// StartOid4vciIssuanceJSONBody defines parameters for StartOid4vciIssuance.
type StartOid4vciIssuanceJSONBody struct {
	AuthorizationDetails []struct {
		CredentialDefinition *map[string]interface{} `json:"credential_definition,omitempty"`
		Format               *string                 `json:"format,omitempty"`
		Type                 *string                 `json:"type,omitempty"`
	} `json:"authorizationDetails"`
	Issuer string `json:"issuer"`

	// RedirectURL The URL to which the user-agent will be redirected after the authorization request.
	RedirectURL string `json:"redirectURL"`
}

// HandleAuthorizeRequestParams defines parameters for HandleAuthorizeRequest.
type HandleAuthorizeRequestParams struct {
	Params *map[string]string `form:"params,omitempty" json:"params,omitempty"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code The authorization code received from the authorization server.
	Code *string `form:"code,omitempty" json:"code,omitempty"`

	// State The client state.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Error The error code.
	Error *string `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription The error description.
	ErrorDescription *string `form:"error_description,omitempty" json:"error_description,omitempty"`
}

// PresentationDefinitionParams defines parameters for PresentationDefinition.
type PresentationDefinitionParams struct {
	Scope string `form:"scope" json:"scope"`
}

// HandleAuthorizeResponseFormdataBody defines parameters for HandleAuthorizeResponse.
type HandleAuthorizeResponseFormdataBody struct {
	// Error error code as defined by the OAuth2 specification
	Error *string `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription error description as defined by the OAuth2 specification
	ErrorDescription       *string `form:"error_description,omitempty" json:"error_description,omitempty"`
	PresentationSubmission *string `form:"presentation_submission,omitempty" json:"presentation_submission,omitempty"`

	// State the client state for the verifier
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// VpToken A Verifiable Presentation in either JSON-LD or JWT format.
	VpToken *string `form:"vp_token,omitempty" json:"vp_token,omitempty"`
}

// HandleTokenRequestFormdataBody defines parameters for HandleTokenRequest.
type HandleTokenRequestFormdataBody struct {
	Assertion              *string `form:"assertion,omitempty" json:"assertion,omitempty"`
	ClientId               *string `form:"client_id,omitempty" json:"client_id,omitempty"`
	Code                   *string `form:"code,omitempty" json:"code,omitempty"`
	GrantType              string  `form:"grant_type" json:"grant_type"`
	PresentationSubmission *string `form:"presentation_submission,omitempty" json:"presentation_submission,omitempty"`
	RedirectUri            *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
	Scope                  *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// RequestServiceAccessTokenJSONBody defines parameters for RequestServiceAccessToken.
type RequestServiceAccessTokenJSONBody struct {
	// Scope The scope that will be the service for which this access token can be used.
	Scope    string `json:"scope"`
	Verifier string `json:"verifier"`
}

// RequestUserAccessTokenJSONBody defines parameters for RequestUserAccessToken.
type RequestUserAccessTokenJSONBody struct {
	// RedirectUri The URL to which the user-agent will be redirected after the authorization request.
	// This is the URL of the calling application.
	// The OAuth2 flow will finish at the /callback URL of the node and the node will redirect the user to this redirect_uri.
	RedirectUri string `json:"redirect_uri"`

	// Scope The scope that will be the service for which this access token can be used.
	Scope string `json:"scope"`

	// UserId The ID of the user for which this access token is requested.
	UserId string `json:"user_id"`

	// Verifier The DID of the verifier, the relying party for which this access token is requested.
	Verifier string `json:"verifier"`
}

// StartOid4vciIssuanceJSONRequestBody defines body for StartOid4vciIssuance for application/json ContentType.
type StartOid4vciIssuanceJSONRequestBody StartOid4vciIssuanceJSONBody

// HandleAuthorizeResponseFormdataRequestBody defines body for HandleAuthorizeResponse for application/x-www-form-urlencoded ContentType.
type HandleAuthorizeResponseFormdataRequestBody HandleAuthorizeResponseFormdataBody

// HandleTokenRequestFormdataRequestBody defines body for HandleTokenRequest for application/x-www-form-urlencoded ContentType.
type HandleTokenRequestFormdataRequestBody HandleTokenRequestFormdataBody

// IntrospectAccessTokenFormdataRequestBody defines body for IntrospectAccessToken for application/x-www-form-urlencoded ContentType.
type IntrospectAccessTokenFormdataRequestBody = TokenIntrospectionRequest

// RequestServiceAccessTokenJSONRequestBody defines body for RequestServiceAccessToken for application/json ContentType.
type RequestServiceAccessTokenJSONRequestBody RequestServiceAccessTokenJSONBody

// RequestUserAccessTokenJSONRequestBody defines body for RequestUserAccessToken for application/json ContentType.
type RequestUserAccessTokenJSONRequestBody RequestUserAccessTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the OAuth2 Authorization Server metadata
	// (GET /.well-known/oauth-authorization-server/iam/{id})
	OAuthAuthorizationServerMetadata(ctx echo.Context, id string) error
	// Metadata in the Dynamic Credential Request OID4VP flow.
	// (GET /iam/oid4vci/dcr/{sessionId}/.well-known/openid-configuration)
	DcrOid4vpMetadata(ctx echo.Context, sessionId string) error
	// Authorize in the Dynamic Credential Request OID4VP flow.
	// (GET /iam/oid4vci/dcr/{sessionId}/authorize)
	DcrOid4vpAuthorize(ctx echo.Context, sessionId string, params DcrOid4vpAuthorizeParams) error
	// Callback for the Oid4VCI flow.
	// (GET /iam/oid4vci/{sessionId}/callback)
	CallbackOid4vciIssuance(ctx echo.Context, sessionId string, params CallbackOid4vciIssuanceParams) error
	// Start the Oid4VCI authorization flow.
	// (POST /iam/{did}/start-oid4vci-issuance)
	StartOid4vciIssuance(ctx echo.Context, did string) error
	// Used by resource owners to initiate the authorization code flow.
	// (GET /iam/{id}/authorize)
	HandleAuthorizeRequest(ctx echo.Context, id string, params HandleAuthorizeRequestParams) error
	// The OAuth2 callback endpoint of the client.
	// (GET /iam/{id}/callback)
	Callback(ctx echo.Context, id string, params CallbackParams) error
	// Returns the did:web version of a Nuts DID document
	// (GET /iam/{id}/did.json)
	GetWebDID(ctx echo.Context, id string) error
	// Get the OAuth2 Client metadata
	// (GET /iam/{id}/oauth-client)
	OAuthClientMetadata(ctx echo.Context, id string) error
	// Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
	// (GET /iam/{id}/presentation_definition)
	PresentationDefinition(ctx echo.Context, id string, params PresentationDefinitionParams) error
	// Used by wallets to post the authorization response or error to.
	// (POST /iam/{id}/response)
	HandleAuthorizeResponse(ctx echo.Context, id string) error
	// Get the StatusList2021Credential for the given DID and page
	// (GET /iam/{id}/statuslist/{page})
	StatusList(ctx echo.Context, id string, page int) error
	// Used by to request access- or refresh tokens.
	// (POST /iam/{id}/token)
	HandleTokenRequest(ctx echo.Context, id string) error
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /internal/auth/v2/accesstoken/introspect)
	IntrospectAccessToken(ctx echo.Context) error
	// Get the access token from the Nuts node that was requested through /request-user-access-token.
	// (GET /internal/auth/v2/accesstoken/{sessionID})
	RetrieveAccessToken(ctx echo.Context, sessionID string) error
	// Start the authorization flow to get an access token from a remote authorization server.
	// (POST /internal/auth/v2/{did}/request-service-access-token)
	RequestServiceAccessToken(ctx echo.Context, did string) error
	// Start the authorization code flow to get an access token from a remote authorization server when user context is required.
	// (POST /internal/auth/v2/{did}/request-user-access-token)
	RequestUserAccessToken(ctx echo.Context, did string) error
	// Helper method to search the wallet.
	// (GET /internal/auth/v2/{did}/wallet)
	SearchWallet(ctx echo.Context, did string) error
	// Delete a specific credential in a wallet
	// (DELETE /internal/auth/v2/{did}/wallet/{id})
	DeleteWalletCredential(ctx echo.Context, did string, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OAuthAuthorizationServerMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthAuthorizationServerMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthAuthorizationServerMetadata(ctx, id)
	return err
}

// DcrOid4vpMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) DcrOid4vpMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, ctx.Param("sessionId"), &sessionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DcrOid4vpMetadata(ctx, sessionId)
	return err
}

// DcrOid4vpAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) DcrOid4vpAuthorize(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, ctx.Param("sessionId"), &sessionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DcrOid4vpAuthorizeParams
	// ------------- Required query parameter "request" -------------

	err = runtime.BindQueryParameter("form", true, true, "request", ctx.QueryParams(), &params.Request)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DcrOid4vpAuthorize(ctx, sessionId, params)
	return err
}

// CallbackOid4vciIssuance converts echo context to params.
func (w *ServerInterfaceWrapper) CallbackOid4vciIssuance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionId" -------------
	var sessionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionId", runtime.ParamLocationPath, ctx.Param("sessionId"), &sessionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionId: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackOid4vciIssuanceParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CallbackOid4vciIssuance(ctx, sessionId, params)
	return err
}

// StartOid4vciIssuance converts echo context to params.
func (w *ServerInterfaceWrapper) StartOid4vciIssuance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartOid4vciIssuance(ctx, did)
	return err
}

// HandleAuthorizeRequest converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAuthorizeRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleAuthorizeRequestParams
	// ------------- Optional query parameter "params" -------------

	err = runtime.BindQueryParameter("form", true, false, "params", ctx.QueryParams(), &params.Params)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter params: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAuthorizeRequest(ctx, id, params)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", ctx.QueryParams(), &params.Error)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error: %s", err))
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", ctx.QueryParams(), &params.ErrorDescription)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error_description: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Callback(ctx, id, params)
	return err
}

// GetWebDID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWebDID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWebDID(ctx, id)
	return err
}

// OAuthClientMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) OAuthClientMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OAuthClientMetadata(ctx, id)
	return err
}

// PresentationDefinition converts echo context to params.
func (w *ServerInterfaceWrapper) PresentationDefinition(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PresentationDefinitionParams
	// ------------- Required query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, true, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PresentationDefinition(ctx, id, params)
	return err
}

// HandleAuthorizeResponse converts echo context to params.
func (w *ServerInterfaceWrapper) HandleAuthorizeResponse(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleAuthorizeResponse(ctx, id)
	return err
}

// StatusList converts echo context to params.
func (w *ServerInterfaceWrapper) StatusList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "page" -------------
	var page int

	err = runtime.BindStyledParameterWithLocation("simple", false, "page", runtime.ParamLocationPath, ctx.Param("page"), &page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StatusList(ctx, id, page)
	return err
}

// HandleTokenRequest converts echo context to params.
func (w *ServerInterfaceWrapper) HandleTokenRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HandleTokenRequest(ctx, id)
	return err
}

// IntrospectAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) IntrospectAccessToken(ctx echo.Context) error {
	var err error

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.IntrospectAccessToken(ctx)
	return err
}

// RetrieveAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sessionID" -------------
	var sessionID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "sessionID", runtime.ParamLocationPath, ctx.Param("sessionID"), &sessionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sessionID: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RetrieveAccessToken(ctx, sessionID)
	return err
}

// RequestServiceAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestServiceAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestServiceAccessToken(ctx, did)
	return err
}

// RequestUserAccessToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestUserAccessToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestUserAccessToken(ctx, did)
	return err
}

// SearchWallet converts echo context to params.
func (w *ServerInterfaceWrapper) SearchWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SearchWallet(ctx, did)
	return err
}

// DeleteWalletCredential converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWalletCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWalletCredential(ctx, did, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/.well-known/oauth-authorization-server/iam/:id", wrapper.OAuthAuthorizationServerMetadata)
	router.GET(baseURL+"/iam/oid4vci/dcr/:sessionId/.well-known/openid-configuration", wrapper.DcrOid4vpMetadata)
	router.GET(baseURL+"/iam/oid4vci/dcr/:sessionId/authorize", wrapper.DcrOid4vpAuthorize)
	router.GET(baseURL+"/iam/oid4vci/:sessionId/callback", wrapper.CallbackOid4vciIssuance)
	router.POST(baseURL+"/iam/:did/start-oid4vci-issuance", wrapper.StartOid4vciIssuance)
	router.GET(baseURL+"/iam/:id/authorize", wrapper.HandleAuthorizeRequest)
	router.GET(baseURL+"/iam/:id/callback", wrapper.Callback)
	router.GET(baseURL+"/iam/:id/did.json", wrapper.GetWebDID)
	router.GET(baseURL+"/iam/:id/oauth-client", wrapper.OAuthClientMetadata)
	router.GET(baseURL+"/iam/:id/presentation_definition", wrapper.PresentationDefinition)
	router.POST(baseURL+"/iam/:id/response", wrapper.HandleAuthorizeResponse)
	router.GET(baseURL+"/iam/:id/statuslist/:page", wrapper.StatusList)
	router.POST(baseURL+"/iam/:id/token", wrapper.HandleTokenRequest)
	router.POST(baseURL+"/internal/auth/v2/accesstoken/introspect", wrapper.IntrospectAccessToken)
	router.GET(baseURL+"/internal/auth/v2/accesstoken/:sessionID", wrapper.RetrieveAccessToken)
	router.POST(baseURL+"/internal/auth/v2/:did/request-service-access-token", wrapper.RequestServiceAccessToken)
	router.POST(baseURL+"/internal/auth/v2/:did/request-user-access-token", wrapper.RequestUserAccessToken)
	router.GET(baseURL+"/internal/auth/v2/:did/wallet", wrapper.SearchWallet)
	router.DELETE(baseURL+"/internal/auth/v2/:did/wallet/:id", wrapper.DeleteWalletCredential)

}

type OAuthAuthorizationServerMetadataRequestObject struct {
	Id string `json:"id"`
}

type OAuthAuthorizationServerMetadataResponseObject interface {
	VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error
}

type OAuthAuthorizationServerMetadata200JSONResponse OAuthAuthorizationServerMetadata

func (response OAuthAuthorizationServerMetadata200JSONResponse) VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response OAuthAuthorizationServerMetadatadefaultApplicationProblemPlusJSONResponse) VisitOAuthAuthorizationServerMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DcrOid4vpMetadataRequestObject struct {
	SessionId string `json:"sessionId"`
}

type DcrOid4vpMetadataResponseObject interface {
	VisitDcrOid4vpMetadataResponse(w http.ResponseWriter) error
}

type DcrOid4vpMetadata200JSONResponse struct {
	// AuthorizationEndpoint URL of the Self-Issued OP used by the RP to perform Authentication of the End-User. Can be custom URL scheme, or Universal Links/App links.
	AuthorizationEndpoint string `json:"authorization_endpoint"`

	// IdTokenSigningAlgValuesSupported A JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token to encode the Claims in a JWT [RFC7519]. Valid values include RS256, ES256, ES256K, and EdDSA.
	IdTokenSigningAlgValuesSupported []string `json:"id_token_signing_alg_values_supported"`

	// IdTokenTypesSupported A JSON array of strings containing the list of ID Token types supported by the OP, the default value is attester_signed_id_token. The ID Token types defined in this specification are:
	// subject_signed_id_token: Self-Issued ID Token, i.e. the ID Token is signed with key material under the End-User's control.
	// attester_signed_id_token: the ID Token is issued by the party operating the OP, i.e. this is the classical ID Token as defined in [OpenID.Core].
	IdTokenTypesSupported *[]string `json:"id_token_types_supported,omitempty"`

	// Issuer URL using the https scheme with no query or fragment component that the Self-Issued OP asserts as its Issuer Identifier. MUST be identical to the iss Claim value in ID Tokens issued from this Self-Issued OP.
	Issuer string `json:"issuer"`

	// RequestObjectSigningAlgValuesSupported A JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects, which are described in Section 6.1 of [OpenID.Core]. Valid values include none, RS256, ES256, ES256K, and EdDSA.
	RequestObjectSigningAlgValuesSupported []string `json:"request_object_signing_alg_values_supported"`

	// ResponseTypesSupported A JSON array of strings representing supported response types. MUST include id_token
	ResponseTypesSupported []string `json:"response_types_supported"`

	// ScopesSupported A JSON array of strings representing supported scopes. MUST support the openid scope value
	ScopesSupported []string `json:"scopes_supported"`

	// SubjectSyntaxTypesSupported A JSON array of strings representing URI scheme identifiers and optionally method names of supported Subject Syntax Types defined in Section 8. When Subject Syntax Type is JWK Thumbprint, a valid value is urn:ietf:params:oauth:jwk-thumbprint defined in [RFC9278]. When Subject Syntax Type is Decentralized Identifier, valid values MUST be a did: prefix followed by a supported DID method without a : suffix. For example, support for the DID method with a method-name "example" would be represented by did:example. Support for all DID methods listed in Section 13 of [DID_Specification_Registries] is indicated by sending did without any method-name.
	SubjectSyntaxTypesSupported []string `json:"subject_syntax_types_supported"`

	// SubjectTypesSupported A JSON array of strings representing supported subject types. Valid values include pairwise and public.
	SubjectTypesSupported []string `json:"subject_types_supported"`
}

func (response DcrOid4vpMetadata200JSONResponse) VisitDcrOid4vpMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DcrOid4vpMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response DcrOid4vpMetadatadefaultApplicationProblemPlusJSONResponse) VisitDcrOid4vpMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DcrOid4vpAuthorizeRequestObject struct {
	SessionId string `json:"sessionId"`
	Params    DcrOid4vpAuthorizeParams
}

type DcrOid4vpAuthorizeResponseObject interface {
	VisitDcrOid4vpAuthorizeResponse(w http.ResponseWriter) error
}

type DcrOid4vpAuthorize302ResponseHeaders struct {
	Location string
}

type DcrOid4vpAuthorize302Response struct {
	Headers DcrOid4vpAuthorize302ResponseHeaders
}

func (response DcrOid4vpAuthorize302Response) VisitDcrOid4vpAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackOid4vciIssuanceRequestObject struct {
	SessionId string `json:"sessionId"`
	Params    CallbackOid4vciIssuanceParams
}

type CallbackOid4vciIssuanceResponseObject interface {
	VisitCallbackOid4vciIssuanceResponse(w http.ResponseWriter) error
}

type CallbackOid4vciIssuance302ResponseHeaders struct {
	Location string
}

type CallbackOid4vciIssuance302Response struct {
	Headers CallbackOid4vciIssuance302ResponseHeaders
}

func (response CallbackOid4vciIssuance302Response) VisitCallbackOid4vciIssuanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackOid4vciIssuancedefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response CallbackOid4vciIssuancedefaultApplicationProblemPlusJSONResponse) VisitCallbackOid4vciIssuanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type StartOid4vciIssuanceRequestObject struct {
	Did  string `json:"did"`
	Body *StartOid4vciIssuanceJSONRequestBody
}

type StartOid4vciIssuanceResponseObject interface {
	VisitStartOid4vciIssuanceResponse(w http.ResponseWriter) error
}

type StartOid4vciIssuance302ResponseHeaders struct {
	Location string
}

type StartOid4vciIssuance302Response struct {
	Headers StartOid4vciIssuance302ResponseHeaders
}

func (response StartOid4vciIssuance302Response) VisitStartOid4vciIssuanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type StartOid4vciIssuancedefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response StartOid4vciIssuancedefaultApplicationProblemPlusJSONResponse) VisitStartOid4vciIssuanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleAuthorizeRequestRequestObject struct {
	Id     string `json:"id"`
	Params HandleAuthorizeRequestParams
}

type HandleAuthorizeRequestResponseObject interface {
	VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error
}

type HandleAuthorizeRequest200TexthtmlResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response HandleAuthorizeRequest200TexthtmlResponse) VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type HandleAuthorizeRequest302ResponseHeaders struct {
	Location string
}

type HandleAuthorizeRequest302Response struct {
	Headers HandleAuthorizeRequest302ResponseHeaders
}

func (response HandleAuthorizeRequest302Response) VisitHandleAuthorizeRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackRequestObject struct {
	Id     string `json:"id"`
	Params CallbackParams
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback302ResponseHeaders struct {
	Location string
}

type Callback302Response struct {
	Headers Callback302ResponseHeaders
}

func (response Callback302Response) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type CallbackdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response CallbackdefaultApplicationProblemPlusJSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetWebDIDRequestObject struct {
	Id string `json:"id"`
}

type GetWebDIDResponseObject interface {
	VisitGetWebDIDResponse(w http.ResponseWriter) error
}

type GetWebDID200JSONResponse DIDDocument

func (response GetWebDID200JSONResponse) VisitGetWebDIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWebDID404Response struct {
}

func (response GetWebDID404Response) VisitGetWebDIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type OAuthClientMetadataRequestObject struct {
	Id string `json:"id"`
}

type OAuthClientMetadataResponseObject interface {
	VisitOAuthClientMetadataResponse(w http.ResponseWriter) error
}

type OAuthClientMetadata200JSONResponse OAuthClientMetadata

func (response OAuthClientMetadata200JSONResponse) VisitOAuthClientMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OAuthClientMetadatadefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response OAuthClientMetadatadefaultApplicationProblemPlusJSONResponse) VisitOAuthClientMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PresentationDefinitionRequestObject struct {
	Id     string `json:"id"`
	Params PresentationDefinitionParams
}

type PresentationDefinitionResponseObject interface {
	VisitPresentationDefinitionResponse(w http.ResponseWriter) error
}

type PresentationDefinition200JSONResponse PresentationDefinition

func (response PresentationDefinition200JSONResponse) VisitPresentationDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PresentationDefinitiondefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response PresentationDefinitiondefaultApplicationProblemPlusJSONResponse) VisitPresentationDefinitionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleAuthorizeResponseRequestObject struct {
	Id   string `json:"id"`
	Body *HandleAuthorizeResponseFormdataRequestBody
}

type HandleAuthorizeResponseResponseObject interface {
	VisitHandleAuthorizeResponseResponse(w http.ResponseWriter) error
}

type HandleAuthorizeResponse200JSONResponse RedirectResponse

func (response HandleAuthorizeResponse200JSONResponse) VisitHandleAuthorizeResponseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusListRequestObject struct {
	Id   string `json:"id"`
	Page int    `json:"page"`
}

type StatusListResponseObject interface {
	VisitStatusListResponse(w http.ResponseWriter) error
}

type StatusList200JSONResponse VerifiableCredential

func (response StatusList200JSONResponse) VisitStatusListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusListdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response StatusListdefaultApplicationProblemPlusJSONResponse) VisitStatusListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type HandleTokenRequestRequestObject struct {
	Id   string `json:"id"`
	Body *HandleTokenRequestFormdataRequestBody
}

type HandleTokenRequestResponseObject interface {
	VisitHandleTokenRequestResponse(w http.ResponseWriter) error
}

type HandleTokenRequest200JSONResponse TokenResponse

func (response HandleTokenRequest200JSONResponse) VisitHandleTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HandleTokenRequestdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response HandleTokenRequestdefaultApplicationProblemPlusJSONResponse) VisitHandleTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type IntrospectAccessTokenRequestObject struct {
	Body *IntrospectAccessTokenFormdataRequestBody
}

type IntrospectAccessTokenResponseObject interface {
	VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error
}

type IntrospectAccessToken200JSONResponse TokenIntrospectionResponse

func (response IntrospectAccessToken200JSONResponse) VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IntrospectAccessToken401Response struct {
}

func (response IntrospectAccessToken401Response) VisitIntrospectAccessTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RetrieveAccessTokenRequestObject struct {
	SessionID string `json:"sessionID"`
}

type RetrieveAccessTokenResponseObject interface {
	VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error
}

type RetrieveAccessToken200JSONResponse TokenResponse

func (response RetrieveAccessToken200JSONResponse) VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RetrieveAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RetrieveAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRetrieveAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestServiceAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestServiceAccessTokenJSONRequestBody
}

type RequestServiceAccessTokenResponseObject interface {
	VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error
}

type RequestServiceAccessToken200JSONResponse TokenResponse

func (response RequestServiceAccessToken200JSONResponse) VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestServiceAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RequestServiceAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRequestServiceAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type RequestUserAccessTokenRequestObject struct {
	Did  string `json:"did"`
	Body *RequestUserAccessTokenJSONRequestBody
}

type RequestUserAccessTokenResponseObject interface {
	VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error
}

type RequestUserAccessToken200JSONResponse RedirectResponseWithID

func (response RequestUserAccessToken200JSONResponse) VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestUserAccessTokendefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response RequestUserAccessTokendefaultApplicationProblemPlusJSONResponse) VisitRequestUserAccessTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchWalletRequestObject struct {
	Did string `json:"did"`
}

type SearchWalletResponseObject interface {
	VisitSearchWalletResponse(w http.ResponseWriter) error
}

type SearchWallet200JSONResponse SearchVCResults

func (response SearchWallet200JSONResponse) VisitSearchWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchWalletdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response SearchWalletdefaultApplicationProblemPlusJSONResponse) VisitSearchWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteWalletCredentialRequestObject struct {
	Did string `json:"did"`
	Id  string `json:"id"`
}

type DeleteWalletCredentialResponseObject interface {
	VisitDeleteWalletCredentialResponse(w http.ResponseWriter) error
}

type DeleteWalletCredential204Response struct {
}

func (response DeleteWalletCredential204Response) VisitDeleteWalletCredentialResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWalletCredentialdefaultApplicationProblemPlusJSONResponse struct {
	Body struct {
		// Detail A human-readable explanation specific to this occurrence of the problem.
		Detail string `json:"detail"`

		// Status HTTP statuscode
		Status float32 `json:"status"`

		// Title A short, human-readable summary of the problem type.
		Title string `json:"title"`
	}
	StatusCode int
}

func (response DeleteWalletCredentialdefaultApplicationProblemPlusJSONResponse) VisitDeleteWalletCredentialResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get the OAuth2 Authorization Server metadata
	// (GET /.well-known/oauth-authorization-server/iam/{id})
	OAuthAuthorizationServerMetadata(ctx context.Context, request OAuthAuthorizationServerMetadataRequestObject) (OAuthAuthorizationServerMetadataResponseObject, error)
	// Metadata in the Dynamic Credential Request OID4VP flow.
	// (GET /iam/oid4vci/dcr/{sessionId}/.well-known/openid-configuration)
	DcrOid4vpMetadata(ctx context.Context, request DcrOid4vpMetadataRequestObject) (DcrOid4vpMetadataResponseObject, error)
	// Authorize in the Dynamic Credential Request OID4VP flow.
	// (GET /iam/oid4vci/dcr/{sessionId}/authorize)
	DcrOid4vpAuthorize(ctx context.Context, request DcrOid4vpAuthorizeRequestObject) (DcrOid4vpAuthorizeResponseObject, error)
	// Callback for the Oid4VCI flow.
	// (GET /iam/oid4vci/{sessionId}/callback)
	CallbackOid4vciIssuance(ctx context.Context, request CallbackOid4vciIssuanceRequestObject) (CallbackOid4vciIssuanceResponseObject, error)
	// Start the Oid4VCI authorization flow.
	// (POST /iam/{did}/start-oid4vci-issuance)
	StartOid4vciIssuance(ctx context.Context, request StartOid4vciIssuanceRequestObject) (StartOid4vciIssuanceResponseObject, error)
	// Used by resource owners to initiate the authorization code flow.
	// (GET /iam/{id}/authorize)
	HandleAuthorizeRequest(ctx context.Context, request HandleAuthorizeRequestRequestObject) (HandleAuthorizeRequestResponseObject, error)
	// The OAuth2 callback endpoint of the client.
	// (GET /iam/{id}/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)
	// Returns the did:web version of a Nuts DID document
	// (GET /iam/{id}/did.json)
	GetWebDID(ctx context.Context, request GetWebDIDRequestObject) (GetWebDIDResponseObject, error)
	// Get the OAuth2 Client metadata
	// (GET /iam/{id}/oauth-client)
	OAuthClientMetadata(ctx context.Context, request OAuthClientMetadataRequestObject) (OAuthClientMetadataResponseObject, error)
	// Used by relying parties to obtain a presentation definition for desired scopes as specified by Nuts RFC021.
	// (GET /iam/{id}/presentation_definition)
	PresentationDefinition(ctx context.Context, request PresentationDefinitionRequestObject) (PresentationDefinitionResponseObject, error)
	// Used by wallets to post the authorization response or error to.
	// (POST /iam/{id}/response)
	HandleAuthorizeResponse(ctx context.Context, request HandleAuthorizeResponseRequestObject) (HandleAuthorizeResponseResponseObject, error)
	// Get the StatusList2021Credential for the given DID and page
	// (GET /iam/{id}/statuslist/{page})
	StatusList(ctx context.Context, request StatusListRequestObject) (StatusListResponseObject, error)
	// Used by to request access- or refresh tokens.
	// (POST /iam/{id}/token)
	HandleTokenRequest(ctx context.Context, request HandleTokenRequestRequestObject) (HandleTokenRequestResponseObject, error)
	// Introspection endpoint to retrieve information from an Access Token as described by RFC7662
	// (POST /internal/auth/v2/accesstoken/introspect)
	IntrospectAccessToken(ctx context.Context, request IntrospectAccessTokenRequestObject) (IntrospectAccessTokenResponseObject, error)
	// Get the access token from the Nuts node that was requested through /request-user-access-token.
	// (GET /internal/auth/v2/accesstoken/{sessionID})
	RetrieveAccessToken(ctx context.Context, request RetrieveAccessTokenRequestObject) (RetrieveAccessTokenResponseObject, error)
	// Start the authorization flow to get an access token from a remote authorization server.
	// (POST /internal/auth/v2/{did}/request-service-access-token)
	RequestServiceAccessToken(ctx context.Context, request RequestServiceAccessTokenRequestObject) (RequestServiceAccessTokenResponseObject, error)
	// Start the authorization code flow to get an access token from a remote authorization server when user context is required.
	// (POST /internal/auth/v2/{did}/request-user-access-token)
	RequestUserAccessToken(ctx context.Context, request RequestUserAccessTokenRequestObject) (RequestUserAccessTokenResponseObject, error)
	// Helper method to search the wallet.
	// (GET /internal/auth/v2/{did}/wallet)
	SearchWallet(ctx context.Context, request SearchWalletRequestObject) (SearchWalletResponseObject, error)
	// Delete a specific credential in a wallet
	// (DELETE /internal/auth/v2/{did}/wallet/{id})
	DeleteWalletCredential(ctx context.Context, request DeleteWalletCredentialRequestObject) (DeleteWalletCredentialResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// OAuthAuthorizationServerMetadata operation middleware
func (sh *strictHandler) OAuthAuthorizationServerMetadata(ctx echo.Context, id string) error {
	var request OAuthAuthorizationServerMetadataRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthAuthorizationServerMetadata(ctx.Request().Context(), request.(OAuthAuthorizationServerMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthAuthorizationServerMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthAuthorizationServerMetadataResponseObject); ok {
		return validResponse.VisitOAuthAuthorizationServerMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DcrOid4vpMetadata operation middleware
func (sh *strictHandler) DcrOid4vpMetadata(ctx echo.Context, sessionId string) error {
	var request DcrOid4vpMetadataRequestObject

	request.SessionId = sessionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DcrOid4vpMetadata(ctx.Request().Context(), request.(DcrOid4vpMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DcrOid4vpMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DcrOid4vpMetadataResponseObject); ok {
		return validResponse.VisitDcrOid4vpMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DcrOid4vpAuthorize operation middleware
func (sh *strictHandler) DcrOid4vpAuthorize(ctx echo.Context, sessionId string, params DcrOid4vpAuthorizeParams) error {
	var request DcrOid4vpAuthorizeRequestObject

	request.SessionId = sessionId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DcrOid4vpAuthorize(ctx.Request().Context(), request.(DcrOid4vpAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DcrOid4vpAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DcrOid4vpAuthorizeResponseObject); ok {
		return validResponse.VisitDcrOid4vpAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CallbackOid4vciIssuance operation middleware
func (sh *strictHandler) CallbackOid4vciIssuance(ctx echo.Context, sessionId string, params CallbackOid4vciIssuanceParams) error {
	var request CallbackOid4vciIssuanceRequestObject

	request.SessionId = sessionId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CallbackOid4vciIssuance(ctx.Request().Context(), request.(CallbackOid4vciIssuanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CallbackOid4vciIssuance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackOid4vciIssuanceResponseObject); ok {
		return validResponse.VisitCallbackOid4vciIssuanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StartOid4vciIssuance operation middleware
func (sh *strictHandler) StartOid4vciIssuance(ctx echo.Context, did string) error {
	var request StartOid4vciIssuanceRequestObject

	request.Did = did

	var body StartOid4vciIssuanceJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartOid4vciIssuance(ctx.Request().Context(), request.(StartOid4vciIssuanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartOid4vciIssuance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StartOid4vciIssuanceResponseObject); ok {
		return validResponse.VisitStartOid4vciIssuanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleAuthorizeRequest operation middleware
func (sh *strictHandler) HandleAuthorizeRequest(ctx echo.Context, id string, params HandleAuthorizeRequestParams) error {
	var request HandleAuthorizeRequestRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleAuthorizeRequest(ctx.Request().Context(), request.(HandleAuthorizeRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleAuthorizeRequest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleAuthorizeRequestResponseObject); ok {
		return validResponse.VisitHandleAuthorizeRequestResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, id string, params CallbackParams) error {
	var request CallbackRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWebDID operation middleware
func (sh *strictHandler) GetWebDID(ctx echo.Context, id string) error {
	var request GetWebDIDRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWebDID(ctx.Request().Context(), request.(GetWebDIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWebDID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWebDIDResponseObject); ok {
		return validResponse.VisitGetWebDIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OAuthClientMetadata operation middleware
func (sh *strictHandler) OAuthClientMetadata(ctx echo.Context, id string) error {
	var request OAuthClientMetadataRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OAuthClientMetadata(ctx.Request().Context(), request.(OAuthClientMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OAuthClientMetadata")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OAuthClientMetadataResponseObject); ok {
		return validResponse.VisitOAuthClientMetadataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PresentationDefinition operation middleware
func (sh *strictHandler) PresentationDefinition(ctx echo.Context, id string, params PresentationDefinitionParams) error {
	var request PresentationDefinitionRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PresentationDefinition(ctx.Request().Context(), request.(PresentationDefinitionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PresentationDefinition")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PresentationDefinitionResponseObject); ok {
		return validResponse.VisitPresentationDefinitionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleAuthorizeResponse operation middleware
func (sh *strictHandler) HandleAuthorizeResponse(ctx echo.Context, id string) error {
	var request HandleAuthorizeResponseRequestObject

	request.Id = id

	if form, err := ctx.FormParams(); err == nil {
		var body HandleAuthorizeResponseFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleAuthorizeResponse(ctx.Request().Context(), request.(HandleAuthorizeResponseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleAuthorizeResponse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleAuthorizeResponseResponseObject); ok {
		return validResponse.VisitHandleAuthorizeResponseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StatusList operation middleware
func (sh *strictHandler) StatusList(ctx echo.Context, id string, page int) error {
	var request StatusListRequestObject

	request.Id = id
	request.Page = page

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StatusList(ctx.Request().Context(), request.(StatusListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StatusListResponseObject); ok {
		return validResponse.VisitStatusListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// HandleTokenRequest operation middleware
func (sh *strictHandler) HandleTokenRequest(ctx echo.Context, id string) error {
	var request HandleTokenRequestRequestObject

	request.Id = id

	if form, err := ctx.FormParams(); err == nil {
		var body HandleTokenRequestFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HandleTokenRequest(ctx.Request().Context(), request.(HandleTokenRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HandleTokenRequest")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HandleTokenRequestResponseObject); ok {
		return validResponse.VisitHandleTokenRequestResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// IntrospectAccessToken operation middleware
func (sh *strictHandler) IntrospectAccessToken(ctx echo.Context) error {
	var request IntrospectAccessTokenRequestObject

	if form, err := ctx.FormParams(); err == nil {
		var body IntrospectAccessTokenFormdataRequestBody
		if err := runtime.BindForm(&body, form, nil, nil); err != nil {
			return err
		}
		request.Body = &body
	} else {
		return err
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IntrospectAccessToken(ctx.Request().Context(), request.(IntrospectAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IntrospectAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(IntrospectAccessTokenResponseObject); ok {
		return validResponse.VisitIntrospectAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RetrieveAccessToken operation middleware
func (sh *strictHandler) RetrieveAccessToken(ctx echo.Context, sessionID string) error {
	var request RetrieveAccessTokenRequestObject

	request.SessionID = sessionID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RetrieveAccessToken(ctx.Request().Context(), request.(RetrieveAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RetrieveAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RetrieveAccessTokenResponseObject); ok {
		return validResponse.VisitRetrieveAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestServiceAccessToken operation middleware
func (sh *strictHandler) RequestServiceAccessToken(ctx echo.Context, did string) error {
	var request RequestServiceAccessTokenRequestObject

	request.Did = did

	var body RequestServiceAccessTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestServiceAccessToken(ctx.Request().Context(), request.(RequestServiceAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestServiceAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestServiceAccessTokenResponseObject); ok {
		return validResponse.VisitRequestServiceAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestUserAccessToken operation middleware
func (sh *strictHandler) RequestUserAccessToken(ctx echo.Context, did string) error {
	var request RequestUserAccessTokenRequestObject

	request.Did = did

	var body RequestUserAccessTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestUserAccessToken(ctx.Request().Context(), request.(RequestUserAccessTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestUserAccessToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestUserAccessTokenResponseObject); ok {
		return validResponse.VisitRequestUserAccessTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SearchWallet operation middleware
func (sh *strictHandler) SearchWallet(ctx echo.Context, did string) error {
	var request SearchWalletRequestObject

	request.Did = did

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SearchWallet(ctx.Request().Context(), request.(SearchWalletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchWallet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SearchWalletResponseObject); ok {
		return validResponse.VisitSearchWalletResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteWalletCredential operation middleware
func (sh *strictHandler) DeleteWalletCredential(ctx echo.Context, did string, id string) error {
	var request DeleteWalletCredentialRequestObject

	request.Did = did
	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWalletCredential(ctx.Request().Context(), request.(DeleteWalletCredentialRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWalletCredential")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteWalletCredentialResponseObject); ok {
		return validResponse.VisitDeleteWalletCredentialResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
